#------------------------------------------------------------------------------
"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Dec 13, 2017

@author: jrm
"""
import os
import sys
import textwrap
if sys.platform == 'win32':
    from enaml import winutil
from enaml.layout.api import align, hbox, spacer
from enaml.core.api import Conditional
from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton
from enaml.stdlib.task_dialog import (
    TaskDialogBody, TaskDialogCommandArea,
    TaskDialogContentArea, TaskDialogDetailsArea, TaskDialogFootnoteArea,
    TaskDialogIconArea, TaskDialogInstructionArea, TaskDialogStyleSheet
)
from enaml.widgets.api import (
    Dialog, Field, Label, PushButton, RadioButton, CheckBox, Html,
    ProgressBar, ObjectCombo, Form, Container, SpinBox, FileDialogEx,
    MultilineField
)
from enamlx.widgets.api import DoubleSpinBox
from .plugin import ExportOptions, log




enamldef ExportDialog(Dialog): dialog:
    title = 'Export model'
    initial_size = (640, 320)
    attr plugin
    attr event
    attr protocol = None
    attr show_advanced: bool = False
    attr options: ExportOptions = create_default_options()

    func create_default_options():
        editor = plugin.workbench.get_plugin('declaracad.editor')
        doc = editor.active_document
        return ExportOptions(filename=doc.name)

    TaskDialogStyleSheet:
            pass
    TaskDialogBody:
        TaskDialogInstructionArea:
            Label:
                style_class = 'task-dialog-instructions'
                text = 'Export model to STL'
        TaskDialogContentArea:
            Label:
                style_class = 'task-dialog-content'
                text = 'Enter the new file name'
            Form:
                Label:
                    text = "Name"
                Container:
                    constraints = [
                        hbox(file_name, browse)
                    ]
                    padding = 0
                    Field: file_name:
                        submit_triggers = ['auto_sync']
                        text << os.path.abspath(options.path)
                        text ::
                            path = change['value']
                            if not path.endswith(".stl"):
                                path += '.stl'
                            options.path = path
                    PushButton: browse:
                        text = "Browse"
                        clicked ::
                            path = FileDialogEx.get_save_file_name(self,
                                        current_path=options.path, name_filters=['*.stl'])
                            if path:
                                if not path.endswith(".stl"):
                                    path += '.stl'
                                options.path = path
        TaskDialogDetailsArea: details:
            visible << dialog.show_advanced or dialog.protocol is not None
            Conditional:
                condition << dialog.show_advanced
                Form:
                    Label:
                        text = "Linear deflection"
                        tool_tip = "Lower means higher quality (1.0 low ... 0.05 high)"
                    DoubleSpinBox:
                        value := options.linear_deflection
                        minimum = 0.0000001
                        single_step = 0.01
                        maximum = 100
                    Label:
                        text = "Angular deflection"
                        tool_tip = "Lower means higher quality (1.0 low ... 0.05 high)"
                    DoubleSpinBox:
                        value := options.angular_deflection
                        minimum = 0.0000001
                        single_step = 0.01
                        maximum = 100
                    CheckBox:
                        text = "Binary mode"
                        tool_tip = "Export as binary (checked) or ascii (unchecked)"
                        checked := options.binary
                    CheckBox:
                        text = "Relative deflection"
                        tool_tip = textwrap.dedent("""
                        If checked, deflection used for discretization of each edge will be
                        <lin_deflection> * <size of edge>. Deflection used for the faces will be the
                        maximum deflection of their edges
                        """).strip()

                        checked := options.relative
            Conditional:
                condition << dialog.protocol is not None
                MultilineField:
                    text << b'\n'.join(dialog.protocol.output)
        TaskDialogCommandArea:
            constraints = [
                hbox(show_options, spacer, btn_yes, btn_no),
                align('v_center', btn_yes, btn_no),
            ]
            CheckBox: show_options:
                text = "Show advanced"
                checked := dialog.show_advanced
            PushButton: btn_no:
                text << "Close" if dialog.protocol else "Cancel"
                clicked :: 
                    dialog.close()
                    if dialog.protocol:
                        dialog.protocol.terminate()
            PushButton: btn_yes:
                enabled << bool(options.path)
                text = "Export"
                clicked ::
                    event.parameters['options'] = options
                    dialog.protocol = plugin.export(event)
                    



