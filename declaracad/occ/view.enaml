"""'
Created on Sep 28, 2016

@author: jrm
"""
import traceback
from atom.api import Atom


from declaracad.core.api import DockItem, EmbeddedWindow
from declaracad.core.utils import load_icon

import enaml
from enaml.core.api import Looper, Include, Conditional
from enaml.core.parser import parse
from enaml.core.import_hooks import EnamlCompiler
from enaml.compat import exec_
from enaml.qt.QtCore import Qt
from enaml.widgets.api import Window, Container, Menu, Action

from .widgets.api import OccViewer
from .plugin import ViewerProcess


enamldef ModelViewer(OccViewer): viewer:
    attr p0 = None
#     on_mouse_press::
#         display, event = change['value']
#         #print 'mouse_press',event
#         pt = event.pos()
#         if event.button() == Qt.LeftButton:
#             display.Select(pt.x(), pt.y())
#         #viewer.p0 = display.View.Convert(pt.x(),pt.y())
#             #raise StopIteration
#    on_mouse_move::
#        display, event = change['value']
#        pt = event.pos()
#        display.MoveTo(pt.x(),pt.y())
#
#        #: Drag selected object
#        if event.buttons() == Qt.LeftButton:
#            p0 = viewer.p0
#            p1 =  display.View.Convert(pt.x(),pt.y())
#            viewer.p0 = p1
#            if viewer.selection and p0:
#                dx,dy,dz = p1[0]-p0[0],p1[1]-p0[1],0
#                for item in viewer.selection:
#                    item.position = (item.x+dx,item.y+dy,item.z)
#
#                raise StopIteration
#        else:
#            viewer.p0 = None
    #on_mouse_release::
    #    display, event = change['value']
    #    print 'mouse_release',event
    #    raise StopIteration
    Menu:
        context_menu = True
        Action:
            text = 'Fit all'
            triggered :: viewer.proxy.display.FitAll()
        Action:
            separator = True
        Menu:
            title = 'Display'
            Looper:
                iterable << viewer.get_member('display_mode').items
                Action:
                    text = loop_item.title()
                    checked << viewer.display_mode == loop_item
                    triggered :: viewer.display_mode = loop_item

        Menu:
            title = 'Selection'
            Looper:
                iterable << viewer.get_member('selection_mode').items
                Action:
                    text = loop_item.title()
                    checked << viewer.selection_mode == loop_item
                    triggered :: viewer.selection_mode = loop_item

        Menu:
            title = 'View'
            Looper:
                iterable << viewer.get_member('view_mode').items
                Action:
                    text = loop_item.title()
                    checked << viewer.view_mode == loop_item
                    triggered :: viewer.view_mode = loop_item


enamldef ViewerWindow(Window): window:
    attr filename: str = "-"
    attr models: list = []
    attr frameless: bool = False
    attr version: int = 1
    attr protocol = None
    activated ::
        if frameless:
            self.proxy.widget.setWindowFlags(Qt.FramelessWindowHint)
        
    func load_source():
        if filename != "-": 
            try:
                with open(filename, 'rU') as f:
                    ast = parse(f.read())
                    code = EnamlCompiler.compile(ast, filename)
                namespace = {}
                exec_(code, namespace)
                Assembly = namespace['Assembly']
                result = [Assembly()]
                if protocol:
                    protocol.send_message({'id': 'render_success'})
                return result
            except Exception as e:
                #: Notify the client that we got an error
                if protocol:
                    protocol.send_message({
                        'error':{
                            'message':traceback.format_exc()
                        },
                        'id': 'render_error'
                    })
                else:
                    traceback.print_exc()
        return []
    Container:
        padding = 0
        ModelViewer:
            Include:
                objects << load_source() if filename and version else []


enamldef EmbeddedViewer(Conditional):
    attr renderer: ViewerProcess = ViewerProcess()
    condition << bool(renderer.window_id)
    EmbeddedWindow: 
        window_id = renderer.window_id


enamldef ViewerDockItem(DockItem): view:
    name = "3d-viewer-{}".format(id(self))
    title = "Viewer"
    alias renderer: viewer.renderer
    activated :: renderer.observe('errors', handle_errors)
    
    func handle_errors(change):
        editor_plugin = plugin.workbench.get_plugin('declaracad.editor')
        editor_plugin.active_document.errors = [change['value']]
                                                    
    icon = load_icon("bricks")
    stretch = 1
    closed :: renderer.terminate()
    Container: container:
        padding = 0
        EmbeddedViewer: viewer:
            pass
    title_bar_right_clicked :: menu.popup()
    Menu: menu:
        Action:
            text = "Split vertically"
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                core.invoke_command('declaracad.viewer.new_viewer',
                                    {'target': view.name,
                                     'position': 'bottom'})
        Action:
            text = "Split horizontally"
            triggered ::
                core = plugin.workbench.get_plugin("enaml.workbench.core")
                core.invoke_command('declaracad.viewer.new_viewer',
                                    {'target': view.name,
                                     'position': 'right'})
