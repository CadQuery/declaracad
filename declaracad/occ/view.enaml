"""'
Created on Sep 28, 2016

@author: jrm
"""
from atom.api import Atom

from declaracad.core.api import DockItem
from declaracad.core.utils import load_icon
from enaml.core.api import Looper, Include
from enaml.widgets.api import Container, Menu, Action

from enaml.qt.QtCore import Qt
from .widgets.api import OccViewer


enamldef ModelViewer(OccViewer): viewer:
    attr p0 = None
#     on_mouse_press::
#         display, event = change['value']
#         #print 'mouse_press',event
#         pt = event.pos()
#         if event.button() == Qt.LeftButton:
#             display.Select(pt.x(), pt.y())
#         #viewer.p0 = display.View.Convert(pt.x(),pt.y())
#             #raise StopIteration
#    on_mouse_move::
#        display, event = change['value']
#        pt = event.pos()
#        display.MoveTo(pt.x(),pt.y())
#
#        #: Drag selected object
#        if event.buttons() == Qt.LeftButton:
#            p0 = viewer.p0
#            p1 =  display.View.Convert(pt.x(),pt.y())
#            viewer.p0 = p1
#            if viewer.selection and p0:
#                dx,dy,dz = p1[0]-p0[0],p1[1]-p0[1],0
#                for item in viewer.selection:
#                    item.position = (item.x+dx,item.y+dy,item.z)
#
#                raise StopIteration
#        else:
#            viewer.p0 = None
    #on_mouse_release::
    #    display, event = change['value']
    #    print 'mouse_release',event
    #    raise StopIteration
    Menu:
        context_menu = True
        Action:
            text = 'Fit all'
            triggered :: viewer.proxy.display.FitAll()
        Menu:
            title = 'View'
            Looper:
                iterable << viewer.get_member('view_mode').items
                Action:
                    text << loop_item
                    triggered :: viewer.view_mode = loop_item


enamldef ViewerDockItem(DockItem): view:
  name = "viewer-item"
  title = "Viewer"
  alias viewer
  closable = False
  icon = load_icon("bricks")
  Container: container:
    padding = 0
    ModelViewer: viewer:
      Include:
        objects << plugin.parts
